<?xml version="1.0" encoding="UTF-8"?>
<chapter id ="AIS">
	<title>Managing Ship Trajectories (AIS)</title>
		<para> AIS stands for Automatic Identification System. It is the location tracking system for sea vessels. This module illustrates how to load big AIS data sets into MobilityDB and do basic exploration.
		</para>
		<para>
		The idea of this module is inspired from the tutorial of <ulink url="https://github.com/anitagraser/movingpandas">MovingPandas</ulink> on ship data analysis by Anita Graser.
		</para>

		<section>
			<title>Contents</title>
			<para>This module covers the following topics:
				<itemizedlist>
					<listitem>
						<para>Loading large trajectory datasets into MobilityDB</para>
					</listitem>
					<listitem>
						<para>Create proper indexes to speed up trajectory construction</para>
					</listitem>
					<listitem>
						<para>Select trajectories by a spatial window</para>
					</listitem>
					<listitem>
						<para>Join trajectories tables by proximity</para>
					</listitem>
					<listitem>
						<para>Select certain parts inside individual trajectories</para>
					</listitem>
					<listitem>
						<para>Manage the temporal speed and azimuth features of ships</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>

		<section>
			<title>Data</title>
			<para>
				The Danish Maritime Authority publishes about 3 TB of AIS routes in CSV format <ulink url="https://www.dma.dk/SikkerhedTilSoes/Sejladsinformation/AIS/Sider/default.aspx">here</ulink>. The columns in the CSV are listed in <xref linkend="tabdata"/>. This module uses the data of one day April 1<superscript>st</superscript> 2018. The CSV file size is 1.9 GB, and it contains about 10 M rows.
			</para>

			<table pgwide='1' width='100%' id='tabdata' frame='all'><title>AIS columns</title>
				<tgroup cols='2' align='left' colsep='1' rowsep='1'>
					<colspec colwidth="1*" colname='c1'/>
					<colspec colwidth="3*" colname='c2'/>
					<tbody>
						<row> <entry>Timestamp</entry> <entry>Timestamp from the AIS base station, format: 31/12/2015 23:59:59</entry> </row>
						<row> <entry>Type of mobile</entry> <entry>Describes what type of target this message is received from (class A AIS Vessel, Class B AIS vessel, etc)</entry> </row>
						<row> <entry>MMSI</entry> <entry>MMSI number of vessel</entry> </row>
						<row> <entry>Latitude</entry> <entry>Latitude of message report (e.g. 57,8794)</entry> </row>
						<row> <entry>Longitude</entry> <entry>Longitude of message report (e.g. 17,9125)</entry> </row>
						<row> <entry>Navigational status</entry> <entry>Navigational status from AIS message if available, e.g.: 'Engaged in fishing', 'Under way using engine', mv.</entry> </row>
						<row> <entry>ROT</entry> <entry>Rot of turn from AIS message if available</entry> </row>
						<row> <entry>SOG</entry> <entry>Speed over ground from AIS message if available</entry> </row>
						<row> <entry>COG</entry> <entry>Course over ground from AIS message if available</entry> </row>
						<row> <entry>Heading</entry> <entry>Heading from AIS message if available</entry> </row>
						<row> <entry>IMO</entry> <entry>IMO number of the vessel</entry> </row>
						<row> <entry>Callsign</entry> <entry>Callsign of the vessel</entry> </row>
						<row> <entry>Name</entry> <entry>Name of the vessel</entry> </row>
						<row> <entry>Ship type</entry> <entry>Describes the AIS ship type of this vessel</entry> </row>
						<row> <entry>Cargo type</entry> <entry>Type of cargo from the AIS message</entry> </row>
						<row> <entry>Width</entry> <entry>Width of the vessel</entry> </row>
						<row> <entry>Length</entry> <entry>Lenght of the vessel</entry> </row>
						<row> <entry>Type of position fixing device</entry> <entry>Type of positional fixing device from the AIS message</entry> </row>
						<row> <entry>Draught</entry> <entry>Draugth field from AIS message</entry> </row>
						<row> <entry>Destination</entry> <entry>Destination from AIS message</entry> </row>
						<row> <entry>ETA</entry> <entry>Estimated Time of Arrival, if available</entry> </row>
						<row> <entry>Data source type</entry> <entry>Data source type, e.g. AIS</entry> </row>
						<row> <entry>Size A</entry> <entry>Length from GPS to the bow</entry> </row>
						<row> <entry>Size B</entry> <entry>Length from GPS to the stern</entry> </row>
						<row> <entry>Size C</entry> <entry>Length from GPS to starboard side</entry> </row>
						<row> <entry>Size D</entry> <entry>Length from GPS to port side</entry> </row>
					</tbody>
				</tgroup>
			</table>
		</section>

		<section>
			<title>Tools</title>
			<para>
				The tools used in this module are as follows:
				<itemizedlist>
					<listitem>
						<para>MobilityDB, on top of PostgreSQL and PostGIS. Here I use the MobilityDB <ulink url="https://github.com/ULB-CoDE-WIT/MobilityDB"> docker image</ulink>. </para>
					</listitem>
					<listitem>
						<para>QGIS</para>
					</listitem>
				</itemizedlist>
			</para>
		</section>

		<section>
			<title>Preparing the Database</title>
			<para>
				Create a new database <varname>DanishAIS</varname>, then use your SQL editor to create the MobilityDB extension as follows:
				<programlisting>
CREATE EXTENSION MobilityDB CASCADE;
				</programlisting>
				The <varname>CASCADE</varname> command will additionally create the PostGIS extension.
			</para>
			<para>
				Now create a table in which the CSV file will be loaded:
				<programlisting>
CREATE TABLE AISInput(
T	timestamp,
TypeOfMobile varchar(50),
MMSI integer,
Latitude float,
Longitude float,
navigationalStatus varchar(50),
ROT float,
SOG float,
COG float,
Heading integer,
IMO varchar(50),
Callsign varchar(50),
Name varchar(100),
ShipType varchar(50),
CargoType varchar(100),
Width float,
Length float,
TypeOfPositionFixingDevice varchar(50),
Draught float,
Destination varchar(50),
ETA varchar(50),
DataSourceType varchar(50),
SizeA float,
SizeB float,
SizeC float,
SizeD float,
Geom geometry(Point, 4326)
);
				</programlisting>
			</para>
		</section>

		<section>
			<title>Loading the Data</title>
			<para>
				For importing CSV data into a PostgreSQL database one can use the <varname>COPY</varname> command as follows:
				<programlisting>
COPY AISInput(T, TypeOfMobile, MMSI, Latitude, Longitude, NavigationalStatus,
ROT, SOG, COG, Heading, IMO, CallSign, Name, ShipType, CargoType, Width, Length,
TypeOfPositionFixingDevice, Draught, Destination, ETA, DataSourceType,
SizeA, SizeB, SizeC, SizeD)
FROM '/home/mobilitydb/DanishAIS/aisdk_20180401.csv' DELIMITER  ',' CSV HEADER;
				</programlisting>
			</para>
			<para>
				This import took about 3 minutes on my machine, which is an average laptop. The CSV file has 10,619,212 rows, all of which were correctly imported. For bigger datasets, one could alternative could use the program <ulink url="https://github.com/dimitri/pgloader">pgloader</ulink>.
			</para>
			<para>
				We clean up some of the fields in the table and create spatial points with the following command.
				<programlisting>
UPDATE AISInput SET
NavigationalStatus = CASE NavigationalStatus WHEN 'Unknown value' THEN NULL END,
IMO = CASE IMO WHEN 'Unknown' THEN NULL END,
ShipType = CASE ShipType WHEN 'Undefined' THEN NULL END,
TypeOfPositionFixingDevice = CASE TypeOfPositionFixingDevice
WHEN 'Undefined' THEN NULL END,
Geom = ST_SetSRID( ST_MakePoint( Longitude, Latitude ), 4326);
				</programlisting>
			</para>
			<para>
				This took about 5 minutes on my machine. Let's visualize the spatial points on QGIS.
			</para>
			<figure id="imgpoints" float="start"><title>Visualizing the input points</title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/points.png'/></imageobject>
				</mediaobject>
			</figure>
			<para>
				Clearly, there are noise points that are far away from Denmark or even outside earth. This module will not discuss a thorough data cleaning. However, we do some basic cleaning in order to be able to construct trajectories:
				<itemizedlist>
					<listitem>
						<para>Filter out points that are outside the window defined by bounds point(-16.1,40.18) and point(32.88, 84.17). This window is obtained from the specifications of the projection in <ulink url="https://epsg.io/25832">https://epsg.io/25832</ulink>.</para>
					</listitem>
					<listitem>
						<para>Filter out the rows that have the same identifier (MMSI, T)</para>
					</listitem>
				</itemizedlist>
			</para>
			<para>
				<programlisting>
CREATE TABLE AISInputFiltered AS
SELECT DISTINCT ON(MMSI,T) *
FROM AISInput
WHERE Longitude BETWEEN -16.1 and 32.88 AND Latitude BETWEEN 40.18 AND 84.17;
-- Query returned successfully: 10357703 rows affected, 01:14 minutes execution time.
SELECT COUNT(*) FROM AISInputFiltered;
--10357703
				</programlisting>
			</para>
		</section>

		<section>
			<title>Constructing Trajectories</title>
			<para>
				Now we are ready to construct ship trajectories out of their individual observations:
			</para>
			<para>
				<programlisting>
CREATE TABLE Ships(MMSI, Trip, SOG, COG) AS
SELECT MMSI,
tgeompointseq(array_agg(tgeompointinst( ST_Transform(Geom, 25832), T) ORDER BY T)),
tfloatseq(array_agg(tfloatinst(SOG, T) ORDER BY T) FILTER (WHERE SOG IS NOT NULL)),
tfloatseq(array_agg(tfloatinst(COG, T) ORDER BY T) FILTER (WHERE COG IS NOT NULL))
FROM AISInputFiltered
GROUP BY MMSI;
-- Query returned successfully: 2995 rows affected, 01:16 minutes execution time.
				</programlisting>
			</para>
			<para>
				This query constructs, per ship, its spatiotemporal trajectory <varname>Trip</varname>, and two temporal attributes <varname>SOG</varname> and <varname>COG</varname>. <varname>Trip</varname> is a temporal geometry point, and both <varname>SOG</varname> and <varname>COG</varname> are temporal floats. MobilityDB builds on the coordinate transformation feature of PostGIS. Here the SRID 25832 (European Terrestrial Reference System 1989) is used, because it is the one advised by Danish Maritime Authority in the download page of this dataset. Now, let's visualize the constructed trajectories in QGIS.
			</para>
			<para>
				<programlisting>
ALTER TABLE Ships ADD COLUMN Traj geometry;
UPDATE Ships SET Traj= trajectory(Trip);
-- Query returned successfully: 2995 rows affected, 3.8 secs execution time.
				</programlisting>
			</para>
			<para>
				<figure id="imgtrajs" float="start"><title>Visualizing the ship trajectories</title>
					<mediaobject>
						<imageobject><imagedata fileref='images/trajs.png' /></imageobject>
					</mediaobject>
				</figure>
			</para>
		</section>

		<section>
			<title>Basic Data Exploration</title>
			<para>
				The total distance traveled by all ships:
			</para>
			<para>
				<programlisting>
SELECT SUM( length( Trip ) ) FROM Ships;
--500433519.121321
				</programlisting>
			</para>
			<para>
				This query uses the <varname>length</varname> function to compute per trip the sailing distance in meters. We then aggregate over all trips and calculate the sum. Let's have a more detailed look, and generate a histogram of trip lengths:
			</para>
			<para>
				<programlisting>
WITH buckets (bucketNo, RangeKM) AS (
SELECT 1, floatrange '[0, 0]' UNION
SELECT 2, floatrange '(0, 50)' UNION
SELECT 3, floatrange '[50, 100)' UNION
SELECT 4, floatrange '[100, 200)' UNION
SELECT 5, floatrange '[200, 500)' UNION
SELECT 6, floatrange '[500, 1500)' UNION
SELECT 7, floatrange '[1500, 10000)' ),
histogram AS (
SELECT bucketNo, RangeKM, count(MMSI) as freq
FROM buckets left outer join Ships on (length(Trip)/1000) &#x003C;&commat; RangeKM
GROUP BY bucketNo, RangeKM
ORDER BY bucketNo, RangeKM
)
SELECT bucketNo, RangeKM, freq,
repeat('&#x25AA;', ( freq::float / max(freq) OVER () * 30 )::int ) AS bar
FROM histogram;
--Total query runtime: 5.6 secs

bucketNo,   bucketRange,        freq	   bar
1;          "[0,0]";            303;       &#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;
2;          "(0,50)";           1693;      &#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;
3;          "[50,100)";         267;       &#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;
4;          "[100,200)";        276;       &#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;
5;          "[200,500)";        361;       &#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;&#x25AA;
6;          "[500,1500)";       86;        &#x25AA;&#x25AA;
7;          "[1500,10000)";     6;
				</programlisting>
			</para>
			<para>
				Surprisingly there are trips with zero length. These are clearly noise that can be deleted. Also there are very many short trips, that are less than 50 km long. On the other hand, there are few long trips that are more than 1,500 km long. Let's visualize these last two cases in <xref linkend="imgtrajsshort"/>. They look like noise. Normally one should validate more, but to simplify this module, we consider them as noise, and delete them.
				<programlisting>
DELETE FROM Ships
WHERE length(Trip) = 0 OR length(Trip) >= 1500000;
-- Query returned successfully in 7 secs 304 msec.
				</programlisting>
				Now the <varname>Ships</varname> table looks like <xref linkend="imgtrajsfiltered"/>.
			</para>
			<figure id="imgtrajsshort" float="start"><title>Visualizing trips with abnormal lengths</title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/trajsShort.png'/></imageobject>
				</mediaobject>
			</figure>
			<figure id="imgtrajsfiltered" float="start"><title>Ship trajectories after filtering</title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/trajsFiltered.png'/></imageobject>
				</mediaobject>
			</figure>
			<para>
				Let's have a look at the speed of the ships. There are two speed values in the data; the speed calculated from the spatiotemporal trajectory <varname>speed(Trip)</varname>, and the <varname>SOG</varname> attribute. Optimally, the two will be the same. A small variance would still be OK, because of sensor errors. Note that both are temporal floats. In the next query, we compare the averages of the two speed values for every ship:
				<programlisting>
SELECT ABS(twavg(SOG) * 1.852 - twavg(speed(Trip))* 3.6 ) SpeedDifference
FROM Ships
ORDER BY SpeedDifference DESC;
--Total query runtime: 8.2 secs
--990 rows retrieved.

SpeedDifference
NULL
NULL
NULL
NULL
NULL
107.861100067879
57.1590253627668
42.4207839833568
39.5819188407125
33.6182789410313
30.9078594633161
26.514042447366
22.1312646226031
20.5389022294181
19.8500569368283
19.4134688682774
18.180139457754
17.4859077178001
17.3155991287105
17.1739822139821
12.9571603234404
12.6195380496344
12.2714437568609
10.9619033557275
10.4164745930929
10.3306155308426
9.46457823214455
...
				</programlisting>
			</para>
			<para>
				The <varname>twavg</varname> computes a time-weighted average of a temporal float. It basically computes the area under the curve, then divides it by the time duration of the temporal float. By doing so, the speed values that remain for longer durations affect the average more than those that remain for shorter durations. Note that SOG is in knot, and Speed(Trip) is in m/s. The query converts both to km/h.
			</para>
			<para>
				The query shows that 26 out of the 990 ship trajectories in the table have a difference of more than 10 km/h or NULL. These trajectories are shown in <xref linkend="imgtrajsWrongSpeed"/>. Again they look like noise, so we remove them.
			</para>
			<figure id="imgtrajsWrongSpeed" float="start"><title>Ship trajectories with big difference between <varname>speed(Trip)</varname> and <varname>SOG</varname></title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/trajsWrongSpeed.png' /></imageobject>
				</mediaobject>
			</figure>
			<para>
				Now we do a similar comparison between the calculated azimuth from the spatiotemporal trajectory, and the attribute COG:
				<programlisting>
SELECT ABS(twavg(COG) - twavg(azimuth(Trip)) * 180.0/pi() ) AzimuthDifference
FROM Ships
ORDER BY AzimuthDifference DESC;
--Total query runtime: 4.0 secs
--964 rows retrieved.

264.838740787458
220.958372832234
180.867071483688
178.774337481463
154.239639388087
139.633953692907
137.347542674865
128.239459879571
121.107566199195
119.843262642657
116.685117326047
116.010477588934
109.830338231363
106.94301191915
106.890186229337
106.55297972109
103.20192549283
102.585009756697
...
				</programlisting>
			</para>
			<para>
				Here we see that the COG is not as accurate as the SOG attribute. More than 100 trajectories have an azimuth difference bigger than 45 degrees. <xref linkend="imgtrajsWrongAzimuth"/> visualizes them. Some of them look like noise, but some look fine. For simplicity, we keep them all.
			</para>
			<figure id="imgtrajsWrongAzimuth" float="start"><title>Ship trajectories with big difference between <varname>azimuth(Trip)</varname> and <varname>COG</varname></title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/trajsWrongAzimuth.png'/></imageobject>
				</mediaobject>
			</figure>
		</section>

		<section>
			<title>Analyzing the Trajectories</title>
			<para>
				Now we dive into MobilityDB and explore more of its functions. In <xref linkend="imgtrajFerry"/>, we notice trajectories that keep going between R&oslash;dby and Puttgarden. Most probably, these are the ferries between the two ports. The task is simply to spot which Ships do so, and to count how many one way trips they did in this day. This is expressed in the following query:
			</para>
			<para>
				<programlisting>
CREATE INDEX Ships_Trip_Idx ON Ships USING GiST(Trip);

WITH Ports(Rodby, Puttgarden) AS (
SELECT ST_MakeEnvelope(651135, 6058230, 651422, 6058548, 25832),
	ST_MakeEnvelope(644339, 6042108, 644896, 6042487, 25832)
)
SELECT S.*, Rodby, Puttgarden
FROM Ports P, Ships S
WHERE intersects(S.Trip, P.Rodby) AND intersects(S.Trip, P.Puttgarden)
--Total query runtime: 462 msec
--4 rows retrieved.
				</programlisting>
			</para>
			<figure id="imgtrajFerry" float="start"><title>A sample ship trajectory between R&oslash;dby and Puttgarden</title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/trajFerry.png'/></imageobject>
				</mediaobject>
			</figure>
			<figure id="imgtrajFerries" float="start"><title>All ferries between R&oslash;dby and Puttgarden</title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/trajFerries.png'/></imageobject>
				</mediaobject>
			</figure>
			<para>
				This query creates two envelope geometries that represent the locations of the two ports, then intersects them with the spatiotemporal trajectories of the ships. The <varname>intersects</varname> function checks whether a temporal point has ever intersects a geometry. To speed up the query, a spatiotemporal GiST index is first built on the <varname>Trip</varname> attribute. The query identified four Ships that commuted between the two ports, <xref linkend="imgtrajFerries"/>. To count how many one way trips each of them did, we extend the previous query as follows:
				<programlisting>
WITH Ports(Rodby, Puttgarden) AS (
SELECT ST_MakeEnvelope(651135, 6058230, 651422, 6058548, 25832),
	ST_MakeEnvelope(644339, 6042108, 644896, 6042487, 25832)
)
SELECT MMSI, (numSequences(atGeometry(S.Trip, P.Rodby)) +
numSequences(atGeometry(S.Trip, P.Puttgarden)))/2.0 AS NumTrips
FROM Ports P, Ships S
WHERE intersects(S.Trip, P.Rodby) AND intersects(S.Trip, P.Puttgarden)
--Total query runtime: 1.1 secs

MMSI		NumTrips
219000429;  24.0
211188000;  24.0
211190000;  25.0
219000431;  16.0
				</programlisting>
			</para>
			<para>
				The function <varname>atGeometry</varname> restricts the temporal point to the parts where it is inside the given geometry. The result is thus a temporal point that consists of multiple pieces (sequences), with temporal gaps in between. The function <varname>numSequences</varname> counts the number of these pieces.
			</para>
			<para>
				With this high number of ferry trips, one wonders whether there are collision risks with ships that traverse this belt (the green trips in <xref linkend="imgtrajFerry"/>). To check this, we query whether a pair of ship come very close to one another as follows:
			</para>
			<para>
				<programlisting>
WITH B(Belt) AS (
SELECT ST_MakeEnvelope(640730, 6058230, 654100, 6042487, 25832)
),
BeltShips AS (
SELECT MMSI, atGeometry(S.Trip, B.Belt) AS Trip,
	trajectory(atGeometry(S.Trip, B.Belt)) AS Traj
FROM Ships S, B
WHERE intersects(S.Trip, B.Belt)
)
SELECT S1.MMSI, S2.MMSI, S1.Traj, S2.Traj, shortestLine(S1.tripETRS, S2.tripETRS) Approach
FROM BeltShips S1, BeltShips S2
WHERE S1.MMSI > S2.MMSI AND
dwithin(S1.tripETRS, S2.tripETRS, 300)
--Total query runtime: 28.5 secs
--7 rows retrieved.
				</programlisting>
			</para>
			<para>
				The query first defines the area of interest as an envelope, the red dashed line in <xref linkend="imgtrajApproach"/>). It then restricts/crops the trajectories to only this envelope using the <varname>atGeometry</varname> function. The main query then find pairs of different trajectories that ever came within a distance of 300 meters to one another (the <varname>dwithin</varname>). For these trajectories, it computes the spatial line that connects the two instants where the two trajectories were closest to one another (the <varname>shortestLine</varname> function). <xref linkend="imgtrajApproach"/> shows the green trajectories that came close to the blue trajectories, and their shortest connecting line in solid red. Most of the approaches occur at the entrance of the R&oslash;dby port, which looks normal. But we also see two interesting approaches, that may indicate danger of collision away from the port. They are shown with more zoom in <xref linkend="imgApproach1"/> and <xref linkend="imgApproach2"/>
			</para>
			<figure id="imgtrajApproach" float="start"><title>Ship that come closer than 300 meters to one another</title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/trajApproach.png'/></imageobject>
				</mediaobject>
			</figure>
			<figure id="imgApproach1" float="start"><title>A zoom-in on a dangerous approach</title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/approach1.png'/></imageobject>
				</mediaobject>
			</figure>
			<figure id="imgApproach2" float="start"><title>Another dangerous approach</title>
				<mediaobject>
					<imageobject><imagedata width='80%' fileref='images/approach2.png'/></imageobject>
				</mediaobject>
			</figure>
		</section>
</chapter>
